---
title: "Rasch data wrangling"
subtitle: "R code examples"
author: 
  name: 'Magnus Johansson'
  affiliation: 'RISE Research Institutes of Sweden'
  affiliation-url: 'https://www.ri.se/en/what-we-do/expertises/category-based-measurements'
  orcid: '0000-0003-1669-592X'
date: last-modified
execute: 
  cache: true
  warning: false
  message: false
editor_options: 
  chunk_output_type: console
---

While the [RISEkbmRasch] package simplifies a lot of the analysis process for doing Rasch analysis in R, users still need to be able to import and make modifications to their data. This demands some knowledge in R data wrangling.

This page will be updated intermittently. The planned content includes:

- dividing a set of items into two or more dataframes in order to run separate analyses (for instance based on an exploratory analysis of a large item set)
- recoding/merging response categories
- splitting an item into two based on a DIF variable
- merging two items into a super-item/testlet

## Dividing a dataset

## Recoding response categories

Many options are available. I have settled on primarily using `car::recode()` from `library(car)` since I find the syntax to be logical and consistent. Another option to consider is `dplyr::recode()`.

The basic syntax of `car::recode()` (henceforth referred to as only `recode()`) is this:

``` r
recode(variable_to_recode, "newvalue1=oldvalue1;newvalue2=oldvalue2", as.factor = FALSE/TRUE)
```

As you can see, semi-colon `;` is used to separate recodings. When numbers are recoded, you just write them out as `1=0`. When characters are involved, you need the single quote symbol to enclose the character string, i.e `'Never'=0` for recoding to numerics (which also necessitates the option `as.factor = FALSE` if you want the variable to be numeric), or `'Never'='Nevver'` when you need to correct misspelled response options.

::: {.callout-tip}
Remember to define your preferred recoding function in your script to avoid headaches due to unexpected error messages.
`recode <- car::recode`
:::

There are some more or less clever ways to use `recode()`. You can simply copy&paste code for each variable, such as:

``` r
df$q1 <- recode(df$q1, "0=1;2=1;3=2", as.factor = FALSE)
df$q2 <- recode(df$q2, "0=1;2=1;3=2", as.factor = FALSE)
df$q3 <- recode(df$q3, "0=1;2=1;3=2", as.factor = FALSE)
df$q4 <- recode(df$q4, "0=1;2=1;3=2", as.factor = FALSE)
df$q5 <- recode(df$q5, "0=1;2=1;3=2", as.factor = FALSE)
```

Such an approach might actually be sensible if each variable needed different recodings. But when you want to make the same changes to many variables, there are of course more efficient strategies. The code above could be rewritten as:

``` r
df %>% 
  mutate(across(q1:q5, ~ car::recode(.x, "0=1;2=1;3=2", as.factor = FALSE)))
```

Or, in this case, where we only want to recode our scale from the range of 1-3 to 0-2, i.e. subtract one:

``` r
df %>% 
  mutate(across(q1:q5, ~ .x - 1))
```

The syntax in these two examples is related to how `tidyverse` uses unnamed functions by the combination of `~` and `.x`, where the latter becomes a placeholder for the variables defined in the first term of `across()`.


Below is another example, where we have multiple cell contents that we want to make into `NA` value to ensure that R interprets them as missing data.

``` r
df$q45 <- recode(df$q45,"990:999=NA;''=NA;'Don't know'=NA")
```

The `:` means that all numbers from 990 to 999 will be recoded into `NA`.



## Item split

## Item merge

## Links

https://github.com/Cghlewis/data-wrangling-functions/wiki